Creer une librarie SDL-ncurses. Implementer ncurses en SDL. P-e utiliser les memes
noms de fonctions, ainsi juste changer l'include et le linkage pour que ca marche.

C'est plus rapide pour développer parce que c'est real time.
C'est plus facile débugger parce que tu peux caller des fonctions.
Tu fais moins d'erreur: Le ; est mis automatiquement ex. (Tu peux pas mettre de ; a la fin d'un if par ex par erreur.)

Plus tard, pour eviter de reloader l'application au complet,
pour que ce soit real time, avoir une application dans une autre.
L'application parent gererait tout ce qui est statique et ne change pas,
l'application enfant reloaderait tout ce qui peut changer comme les fonctions.
La premiere app est l'editeur. La seconde est le proglang.

Quand tu fais enter, le ; est rajouter.
Pour commencer l'intérieur ({), faire shift+enter.
Pour finir l'intérieur (}), faire ctrl+enter.

>> def add int int int
Plus tard:
>> def add :: int -> int -> int
--
>> edit add
\x y -> return x + y;

Toutes les fonctions sont ecrites sous formes de lambda.
Pour l'instant, meme les fonctions sans args...

main = \ ->

Ajouter une petite db interne pour pouvoir rechercher les fonctions par noms et par types.

>> gen Arg val:char[52] nxt:Arg*
=> model/Arg.h 
=> model/Arg.c
=> update app.h
=> update compile.sh

p-e que def est une macro, tout comme :: en serait une. if et else pourrait aussi.

alias est typedef

Quand je liste, mettre un chiffre comme ca je peux referencer par le chiffre au lieu de tout recrire. Ou $+lettre

Version 0.1
>> def add, int x, int y, int  // Plus tard: add :: int x -> int y -> int
>> edit add
int add(int x, int y) {
  return x + y;
} //(ctrl+enter) => ;}
>> restart
>> add 1, 3  // Tu peux
=> 4

// Currying!!!

>> def main, int argc, char* argv[], int
=> cat "int main(int argc, char* argv[])" > def.h // TODO: Vérifier si main est déjà définie.

>> def run, void

>> edit main
.. run()

>> list
=> main, int argc, char* argv[], int
=> run, void

>> show main
.. run()

>> run main

main.o
main.c

Etre capable de debugger. Inspect var.
